<?phpnamespace Utils;use Model\Model;/** * @property string title * @property string description * @property float|int|null|string ogimage * @property string url * @property array js * @property array css * @property string header * @property float|int|mixed|null|string content * @property float|int|null|string h1 */class Template {	/**	 * @var string	 */	protected $filename;	/**	 * @var string	 */	protected $page_url = '';	/**	 * @var string	 */	private $template = '';	/**	 * @var string	 */	private $breadcrumbs = '';	/**	 * @var bool	 */	private $menu = false;	/**	 * @var bool	 */	private $from_cache = true;	/**	 * Template constructor.	 * @param $filename	 */	public function __construct($filename) {		$this->page_url .= $_SERVER['REQUEST_URI'];		$this->filename = _TEMPLATE_DIR_ . $filename;	}	/**	 * @param $key	 * @param $value	 */	public function __set($key, $value) {		$this->$key = $value;	}	/**	 * @param $links	 */	public function setBreadcrumbs($links) {		foreach($links as $key => $value) {			if('/' . $key != $_SERVER['REQUEST_URI']) $this->breadcrumbs = ($this->breadcrumbs == '') ? /** @lang text */				'<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/' . $key . '" itemprop="url" title="' . $value . '"><span itemprop="title">' . $value . '</span></a></li>' : $this->breadcrumbs . '<li itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/' . $key . '" itemprop="url" title="' . $value . '"><span itemprop="title">' . $value . '</span></a></li>';			else $this->breadcrumbs = ($this->breadcrumbs == '') ? /** @lang text */				'<li id="bselected" itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/' . $key . '" itemprop="url" title="' . $value . '"><span itemprop="title">' . $value . '</span></a></li>' : $this->breadcrumbs . '<li id="bselected" itemscope itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/' . $key . '" itemprop="url" title="' . $value . '"><span itemprop="title">' . $value . '</span></a></li>';		}	}	/**	 * @param $mArr	 * @param int $level	 * @return string	 */	private function menu($mArr, $level = 0) {		$menu = '';		foreach($mArr AS $parent => $pages) {			if($parent == $level) {				foreach($pages AS $page) {					if(!empty(trim($page['url'], '/')) && !array_key_exists('fshtml', $page)) $page['url'] .= '.html';					//If it has submenu build a dropdown					if(array_key_exists($page['id'], $mArr)) {						$cssClasses = (array_key_exists('classes', $page)) ? ' ' . $page['classes'] : '';						$menu .= '<li class="nav-item dropdown' . $cssClasses . '">							<a class="nav-link dropdown-toggle" href="#" id="menu' . $page['id'] . '">' . $page['menu_text'] . '</a>							<div class="dropdown-menu" aria-labelledby="menu' . $page['id'] . '">								<a class="dropdown-item" href="' . $page['url'] . '">' . $page['submenu_text'] . '</a>' . $this->menu($mArr, $page['id']) . '							</div>						</li>';					}					else {						$cssClasses = (array_key_exists('classes', $page)) ? ' ' . $page['classes'] : '';						$menu .= '<li class="nav-item' . $cssClasses . '"><a class="nav-link" href="' . $page['url'] . '">' . $page['menu_text'] . '</a></li>';					}				}			}		}		return $menu;	}	/**	 * @return bool	 */	public function load_template() {		if(!file_exists($this->filename) || is_dir($this->filename)) die("Error loading template ({$this->filename}).");		//Load the html template		$this->template = file_get_contents($this->filename);		require_once(dirname(__FILE__) . '/scripts.php');		$userLanguage = Util::getUserSetting('language');		//Set the javascript variable for language		$this->LANGUAGE = $userLanguage;		$pages = new Model('pages');		$pages->language = $userLanguage;		$pages->visible = 1;		//Look for the meta open graph for the current page		$pages->visible = 1;		$pages->language = $userLanguage;		$pagesArray = $pages->get();		foreach($pagesArray AS $page) {			if(($_SERVER['REQUEST_URI'] == '/' . $page->url || $_SERVER['REQUEST_URI'] == '/' . $page->url . '.html') && $page->metaog != '') {				$metaog = json_decode($page->metaog, true);				$this->template = preg_replace(/** @lang text */					'/(\<meta property\=\"og\:title\" content\=\")(.*)(\" \/\>)/', "$1{$metaog['title']}$3", $this->template, 1);				$this->template = preg_replace(/** @lang text */					'/(\<meta property\=\"og\:description\" content\=\")(.*)(\" \/\>)/', "$1{$metaog['description']}$3", $this->template, 1);				$replacementpic = '<meta property="og:image" content="http://' . _ADDRESS_ . '/img/' . $metaog['image'] . '" />';				$this->template = preg_replace(/** @lang text */					'/\<meta property\=\"og\:image\" content\=\"(.*)\" \/\>/', $replacementpic, $this->template, 1);			}		}		/*		 * Build the menu left		*/		$pages->menu_order = array('0', '!=');		$pages->order('menu_parent ASC, menu_order ASC');		$array_pages = $pages->get();		$array_menu = array();		foreach($array_pages AS $page) {			if(!array_key_exists($page->menu->parent, $array_menu)) $array_menu[$page->menu->parent] = array();			$pag = array('id' => $page->id, 'url' => _FOLDER_URL_ . $page->url, 'menu_text' => $page->menu->text, 'submenu_text' => $page->submenu->text, 'menu_parent' => $page->menu->parent);			if(property_exists($page, 'fshtml')) $pag['fshtml'] = 1;			//If page url is the same as the current url set link class as active			if($_SERVER['REQUEST_URI'] == '/' . $page->url || $_SERVER['REQUEST_URI'] == '/' . $page->url . '.html') $pag['classes'] = 'active';			$array_menu[$page->menu->parent][] = $pag;		}		$menu = $this->menu($array_menu);		$classNews = (preg_match('/news\/.*/', $_SERVER['REQUEST_URI'])) ? ' active' : '';		$menu .= '<li class="nav-item' . $classNews . '"><a class="nav-link" href="/news/" title="' . __('News') . '">' . __('News') . '</a></li>';		$this->menu = $menu;		//End of menu left		/*		 * Build the menu right: Dropdown for languages, login button		 */		$menuRight = '';		$pages->clear();		$pages->groupBy('language');		$pages->order('language ASC');		$pagesArray = $pages->get();		if(count($pagesArray) > 1) {			$currentLanguage = 'English';			foreach($pagesArray AS $page) {				if($page->language == $userLanguage) $currentLanguage = $page->languages->name;			}			if(!property_exists($this, 'css')) $this->css = array();			$this->css[] = 'https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.6.2/css/bootstrap-select.min.css';			$this->css[] = 'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/0.8.2/css/flag-icon.min.css';			$menuRight = '<div class="dropdown">					<button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">' . $currentLanguage . '</button>  					<div class="dropdown-menu" aria-labelledby="dropdownMenuButton">' . PHP_EOL;			foreach($pagesArray AS $page) {				$flag = ($page->language == 'en')?'us':$page->language;				$menuRight .= "  						<a class=\"dropdown-item language\" href=\"#\" data-language=\"{$page->language}\"><span class=\"flag-icon flag-icon-{$flag}\"></span>" . $page->languages->name . "</a>";			}			$menuRight .= '  					</div>				</div>' . PHP_EOL;		}		if(!array_key_exists('user', $_SESSION)) {			$login_page = '/login.html';			$classes = ($_SERVER['REQUEST_URI'] == $login_page) ? ' active' : '';			$menuRight .= /** @lang text */				'<div class="nav-item"><a class="nav-link' . $classes . '" href="' . $login_page . '" title="' . __('Login') . '">' . __('Login') . '</a></div>';		}		else {			$classMyAccount = (preg_match('/my-account\.html/', $_SERVER['REQUEST_URI'])) ? ' class="active"' : '';			$menuRight .= '<div class="magenta' . $classMyAccount . '"><a href="/my-account.html" title="' . __('My account') . '" class="firstLevel menu">' . __('My account') . '</a></div>						<div class="authmenu login"><a href="/logout" class="menu">' . __('Logout') . '</a></div>';		}		$this->menu_right = $menuRight;		//End of menu right		//Set the main javascripts		$mainJavascripts = 'jquery.min.js,main.js';		loadJs($mainJavascripts, $this->from_cache);		$this->MAIN_JAVASCRIPTS = '<script type="text/javascript" src="/js/' . md5($mainJavascripts) .'.js"></script>';		//Set the content values to replace inside html template		foreach(get_object_vars($this) AS $key => $value) {			if(!is_object($value) && !is_array($value)) {				$change = "{" . $key . "}";				$this->template = str_replace($change, $value, $this->template);			}		}		//Replace {breadcrumbs} string with actual breadcrumbs		$this->template = str_replace('{breadcrumbs}', $this->breadcrumbs, $this->template);		//Add javascripts in page		if(count($this->js) > 0) {			$js = array();			$replacement = '';			foreach($this->js AS $fjs) {				if(strpos($fjs, '//') !== false) $replacement .= '		<script defer type="text/javascript" src="' . $fjs . '"></script>' . PHP_EOL;			}			foreach($this->js AS $fjs) {				if(strpos($fjs, '//') === false) $js[] = $fjs;			}			if(count($js) > 0) {				$scripts = implode(",", $js);				loadJs($scripts, $this->from_cache);				$replacement .= /** @lang text */					'		<script defer type="text/javascript" src="/js/' . md5($scripts) . '.js"></script>' . PHP_EOL;			}			$pos = strripos($this->template, "</script>");			$this->template = substr_replace($this->template, "\n" . $replacement, $pos + 9, 0);		}		//Add styles in page		if(count($this->css) > 0) {			$scripts = '';			$css = array();			foreach($this->css AS $fcss) {				if(strpos($fcss, '//') === false) $css[] = $fcss;			}			$replacement = '';			if(count($css) > 0) $scripts .= implode(',', $css);			foreach($this->css AS $fcss) {				if(strpos($fcss, '//') !== false) $replacement .= '		<link rel="stylesheet" href="' . $fcss . '" />' . PHP_EOL;			}			$pos = strripos($this->template, "\t</body>");			$this->template = substr_replace($this->template, $replacement, $pos, 0);			loadCss($scripts, $this->from_cache);			$footer = /** @lang text */				'		<noscript id="deferred-styles">			<link rel="stylesheet" type="text/css" href="/css/' . md5($scripts) . '.css" id="cssdeferred" />		</noscript>		<script>			var loadDeferredStyles = function() {				var addStylesNode = document.getElementById("deferred-styles");				var replacement = document.createElement("div");				replacement.innerHTML = addStylesNode.textContent;				document.body.appendChild(replacement);				addStylesNode.parentElement.removeChild(addStylesNode);			};			var raf = requestAnimationFrame || mozRequestAnimationFrame || webkitRequestAnimationFrame || msRequestAnimationFrame;			if (raf) raf(function() { window.setTimeout(loadDeferredStyles, 0); });			else window.addEventListener(\'load\', loadDeferredStyles);		</script>' . PHP_EOL;		}		//Build header and content		$this->header = substr($this->template, 0, strripos($this->template, "\t</head>") + 9);		$this->content = substr($this->template, strlen($this->header), strlen($this->template) - strlen($this->header));		if(isset($footer)) $this->content = str_replace("\t</body>", $footer . "\t</body>", $this->content);		$countriesOptions = '	<option value="">' . __('Country') . '</option>' . PHP_EOL;		$countries = new Model('countries');		$countries = $countries->get();		foreach($countries AS $country) $countriesOptions .= '	<option value="' . $country->id . '">' . $country->name . '</option>' . PHP_EOL;		$this->content = str_replace('<option value="">' . __('Country') . '</option>', $countriesOptions, $this->content);		return true;	}	public function output() {		$this->load_template();		$buffer = $this->header;		$buffer .= $this->content;		echo $buffer;	}}